{"ast":null,"code":"var _jsxFileName = \"/home/psc/react-template/react-material-dashboard/src/views/Trendup/clothes/trendmap/Results.js\";\nimport React, { useState } from 'react';\nimport { Sigma, RandomizeNodePositions, RelativeSize } from 'react-sigma';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport { Avatar, Box, Card, Checkbox, Table, TableBody, TableCell, TableHead, TablePagination, TableRow, Typography, makeStyles, TextField } from '@material-ui/core';\nimport getInitials from 'src/utils/getInitials';\nconst useStyles = makeStyles(theme => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results = ({\n  className,\n  customers,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n  console.log(\"12\", customers);\n  /*\n  console.log(\"11\",customers)\n  const handleSelectAll = (event) => {\n    let newSelectedCustomerIds;\n     if (event.target.checked) {\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n     setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n   const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n     if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        selectedCustomerIds.slice(0, selectedIndex),\n        selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n     setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n   const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n   const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n   */\n\n  return /*#__PURE__*/React.createElement(Card, Object.assign({\n    className: clsx(classes.root, className)\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    id: \"time\",\n    label: customers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }));\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.any.isRequired\n};\nexport default Results;","map":{"version":3,"sources":["/home/psc/react-template/react-material-dashboard/src/views/Trendup/clothes/trendmap/Results.js"],"names":["React","useState","Sigma","RandomizeNodePositions","RelativeSize","clsx","PropTypes","moment","PerfectScrollbar","Avatar","Box","Card","Checkbox","Table","TableBody","TableCell","TableHead","TablePagination","TableRow","Typography","makeStyles","TextField","getInitials","useStyles","theme","root","avatar","marginRight","spacing","Results","className","customers","rest","classes","selectedCustomerIds","setSelectedCustomerIds","limit","setLimit","page","setPage","console","log","propTypes","string","any","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAAQC,KAAR,EAAeC,sBAAf,EAAuCC,YAAvC,QAA0D,aAA1D;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,gBAAP,MAA6B,yBAA7B;AACA,SACEC,MADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,QAJF,EAKEC,KALF,EAMEC,SANF,EAOEC,SAPF,EAQEC,SARF,EASEC,eATF,EAUEC,QAVF,EAWEC,UAXF,EAYEC,UAZF,EAaEC,SAbF,QAcO,mBAdP;AAeA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAEI,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE,EADiC;AAEvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,WAAW,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AADP;AAF+B,CAAZ,CAAD,CAA5B;;AAOA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwB,KAAGC;AAA3B,CAAD,KAAuC;AACrD,QAAMC,OAAO,GAAGV,SAAS,EAAzB;AACA,QAAM,CAACW,mBAAD,EAAsBC,sBAAtB,IAAgDlC,QAAQ,CAAC,EAAD,CAA9D;AACA,QAAM,CAACmC,KAAD,EAAQC,QAAR,IAAoBpC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACqC,IAAD,EAAOC,OAAP,IAAkBtC,QAAQ,CAAC,CAAD,CAAhC;AAEAuC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBV,SAAjB;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2CA,sBACE,oBAAC,IAAD;AACE,IAAA,SAAS,EAAE1B,IAAI,CAAC4B,OAAO,CAACR,IAAT,EAAeK,SAAf;AADjB,KAEME,IAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIE,oBAAC,SAAD;AAAW,IAAA,EAAE,EAAC,MAAd;AAAqB,IAAA,KAAK,EAAED,SAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAiBD,CAnED;;AAqEAF,OAAO,CAACa,SAAR,GAAoB;AAClBZ,EAAAA,SAAS,EAAExB,SAAS,CAACqC,MADH;AAElBZ,EAAAA,SAAS,EAAEzB,SAAS,CAACsC,GAAV,CAAcC;AAFP,CAApB;AAKA,eAAehB,OAAf","sourcesContent":["import React, { useState } from 'react';\nimport {Sigma, RandomizeNodePositions, RelativeSize} from 'react-sigma';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport {\n  Avatar,\n  Box,\n  Card,\n  Checkbox,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TablePagination,\n  TableRow,\n  Typography,\n  makeStyles,\n  TextField\n} from '@material-ui/core';\nimport getInitials from 'src/utils/getInitials';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {},\n  avatar: {\n    marginRight: theme.spacing(2)\n  }\n}));\n\nconst Results = ({ className, customers, ...rest }) => {\n  const classes = useStyles();\n  const [selectedCustomerIds, setSelectedCustomerIds] = useState([]);\n  const [limit, setLimit] = useState(10);\n  const [page, setPage] = useState(0);\n\n  console.log(\"12\",customers)\n  /*\n  console.log(\"11\",customers)\n  const handleSelectAll = (event) => {\n    let newSelectedCustomerIds;\n\n    if (event.target.checked) {\n      newSelectedCustomerIds = customers.map((customer) => customer.id);\n    } else {\n      newSelectedCustomerIds = [];\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleSelectOne = (event, id) => {\n    const selectedIndex = selectedCustomerIds.indexOf(id);\n    let newSelectedCustomerIds = [];\n\n    if (selectedIndex === -1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds, id);\n    } else if (selectedIndex === 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(1));\n    } else if (selectedIndex === selectedCustomerIds.length - 1) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(selectedCustomerIds.slice(0, -1));\n    } else if (selectedIndex > 0) {\n      newSelectedCustomerIds = newSelectedCustomerIds.concat(\n        selectedCustomerIds.slice(0, selectedIndex),\n        selectedCustomerIds.slice(selectedIndex + 1)\n      );\n    }\n\n    setSelectedCustomerIds(newSelectedCustomerIds);\n  };\n\n  const handleLimitChange = (event) => {\n    setLimit(event.target.value);\n  };\n\n  const handlePageChange = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  */\n  return (\n    <Card\n      className={clsx(classes.root, className)}\n      {...rest}\n    >\n      <TextField id=\"time\" label={customers}  />\n      {/*}\n      <Sigma\n        graph={customers} settings={{drawEdges: true, clone: false,labelThreshold: true}}\n        onClickNode={e=> window.open( `https://www.youtube.com/channel/${e.data.node[\"id\"]}`, '_blank')}\n      >\n        <RelativeSize initialSize={50}/>\n        <RandomizeNodePositions/>\n      </Sigma>\n  */}\n    </Card>\n  );\n};\n\nResults.propTypes = {\n  className: PropTypes.string,\n  customers: PropTypes.any.isRequired\n};\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}