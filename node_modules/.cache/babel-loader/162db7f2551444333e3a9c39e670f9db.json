{"ast":null,"code":"var _jsxFileName = \"/home/psc/react-template/react-material-dashboard/src/views/Trendup/clothes/trendmap/index.js\";\nimport React from 'react';\nimport { Sigma, RandomizeNodePositions, RelativeSize } from 'react-sigma';\nimport { Container, Grid, makeStyles } from '@material-ui/core';\nimport Page from 'src/components/Page';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst Trendup = () => {\n  const classes = useStyles();\n  let myGraph = {\n    nodes: [{\n      id: \"n1\",\n      size: 10,\n      label: \"alice\"\n    }, {\n      id: \"n2\",\n      size: 5,\n      label: \"rabit\"\n    }, {\n      id: \"n3\",\n      size: 20,\n      label: \"me\"\n    }],\n    edges: [{\n      id: \"e1\",\n      source: \"n1\",\n      target: \"n2\",\n      type: \"curvedArrow\",\n      size: 5\n    }, {\n      id: \"e2\",\n      source: \"n2\",\n      target: \"n3\",\n      size: 1\n    }]\n  };\n  Sigma.classes.graph.addMethod('neighbors', function (nodeId) {\n    var k;\n    neighbors = {}, index = this.allNeighborsIndex[nodeId] || {};\n\n    for (k in index) neighbors[k] = this.nodesIndex[k];\n\n    return neighbors;\n  });\n  Sigma.parsers.gexf('path/to/les-miserables.gexf', {\n    container: 'sigma-container'\n  }, function (s) {\n    // We first need to save the original colors of our\n    // nodes and edges, like this:\n    s.graph.nodes().forEach(function (n) {\n      n.originalColor = n.color;\n    });\n    s.graph.edges().forEach(function (e) {\n      e.originalColor = e.color;\n    }); // When a node is clicked, we check for each node\n    // if it is a neighbor of the clicked one. If not,\n    // we set its color as grey, and else, it takes its\n    // original color.\n    // We do the same for the edges, and we only keep\n    // edges that have both extremities colored.\n\n    s.bind('clickNode', function (e) {\n      var nodeId = e.data.node.id,\n          toKeep = s.graph.neighbors(nodeId);\n      toKeep[nodeId] = e.data.node;\n      s.graph.nodes().forEach(function (n) {\n        if (toKeep[n.id]) n.color = n.originalColor;else n.color = '#eee';\n      });\n      s.graph.edges().forEach(function (e) {\n        if (toKeep[e.source] && toKeep[e.target]) e.color = e.originalColor;else e.color = '#eee';\n      }); // Since the data has been modified, we need to\n      // call the refresh method to make the colors\n      // update effective.\n\n      s.refresh();\n    }); // When the stage is clicked, we just color each\n    // node and edge with its original color.\n\n    s.bind('clickStage', function (e) {\n      s.graph.nodes().forEach(function (n) {\n        n.color = n.originalColor;\n      });\n      s.graph.edges().forEach(function (e) {\n        e.color = e.originalColor;\n      }); // Same as in the previous event:\n\n      s.refresh();\n    });\n  });\n  return /*#__PURE__*/React.createElement(Page, {\n    className: classes.root,\n    title: \"Dashboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    maxWidth: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Trendup;","map":{"version":3,"sources":["/home/psc/react-template/react-material-dashboard/src/views/Trendup/clothes/trendmap/index.js"],"names":["React","Sigma","RandomizeNodePositions","RelativeSize","Container","Grid","makeStyles","Page","useStyles","theme","root","backgroundColor","palette","background","dark","minHeight","paddingBottom","spacing","paddingTop","Trendup","classes","myGraph","nodes","id","size","label","edges","source","target","type","graph","addMethod","nodeId","k","neighbors","index","allNeighborsIndex","nodesIndex","parsers","gexf","container","s","forEach","n","originalColor","color","e","bind","data","node","toKeep","refresh"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {Sigma, RandomizeNodePositions, RelativeSize} from 'react-sigma';\nimport {\n  Container,\n  Grid,\n  makeStyles\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nconst Trendup = () => {\n  const classes = useStyles();\n\n  let myGraph = {nodes:[{id:\"n1\", size:10, label:\"alice\"},{id:\"n2\", size: 5, label:\"rabit\"}, {id:\"n3\", size: 20, label:\"me\"}],\n   edges:[{id:\"e1\", source:\"n1\", target:\"n2\", type:\"curvedArrow\", size:5}, {id:\"e2\", source:\"n2\", target:\"n3\", size:1}]}\n\n   Sigma.classes.graph.addMethod('neighbors', function(nodeId) {\n    var k\n        neighbors = {},\n        index = this.allNeighborsIndex[nodeId] || {};\n\n    for (k in index)\n      neighbors[k] = this.nodesIndex[k];\n\n    return neighbors;\n  })\n\n  Sigma.parsers.gexf(\n    'path/to/les-miserables.gexf',\n    {\n      container: 'sigma-container'\n    },\n    function(s) {\n      // We first need to save the original colors of our\n      // nodes and edges, like this:\n      s.graph.nodes().forEach(function(n) {\n        n.originalColor = n.color;\n      });\n      s.graph.edges().forEach(function(e) {\n        e.originalColor = e.color;\n      });\n\n      // When a node is clicked, we check for each node\n      // if it is a neighbor of the clicked one. If not,\n      // we set its color as grey, and else, it takes its\n      // original color.\n      // We do the same for the edges, and we only keep\n      // edges that have both extremities colored.\n      s.bind('clickNode', function(e) {\n        var nodeId = e.data.node.id,\n            toKeep = s.graph.neighbors(nodeId);\n        toKeep[nodeId] = e.data.node;\n\n        s.graph.nodes().forEach(function(n) {\n          if (toKeep[n.id])\n            n.color = n.originalColor;\n          else\n            n.color = '#eee';\n        });\n\n        s.graph.edges().forEach(function(e) {\n          if (toKeep[e.source] && toKeep[e.target])\n            e.color = e.originalColor;\n          else\n            e.color = '#eee';\n        });\n\n        // Since the data has been modified, we need to\n        // call the refresh method to make the colors\n        // update effective.\n        s.refresh();\n      });\n\n      // When the stage is clicked, we just color each\n      // node and edge with its original color.\n      s.bind('clickStage', function(e) {\n        s.graph.nodes().forEach(function(n) {\n          n.color = n.originalColor;\n        });\n\n        s.graph.edges().forEach(function(e) {\n          e.color = e.originalColor;\n        });\n\n        // Same as in the previous event:\n        s.refresh();\n      });\n    }\n  );\n\n\n\n\n  return (\n    <Page\n      className={classes.root}\n      title=\"Dashboard\"\n    >\n      <Container maxWidth={false}>\n        {\n         \n        }\n\n        {/*\n        <Sigma\n          graph={myGraph} settings={{drawEdges: true, clone: false}}\n          \n        >\n          <RelativeSize initialSize={15}/>\n          <RandomizeNodePositions/>\n        </Sigma>\n        */}\n          {/*\n        <Grid\n          container\n          spacing={3}\n        >\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <Budget />\n          </Grid>\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <TotalCustomers />\n          </Grid>\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <TasksProgress />\n          </Grid>\n          <Grid\n            item\n            lg={3}\n            sm={6}\n            xl={3}\n            xs={12}\n          >\n            <TotalProfit />\n          </Grid>\n          <Grid\n            item\n            lg={8}\n            md={12}\n            xl={9}\n            xs={12}\n          >\n            <Sales />\n          </Grid>\n          <Grid\n            item\n            lg={4}\n            md={6}\n            xl={3}\n            xs={12}\n          >\n            <TrafficByDevice />\n          </Grid>\n          <Grid\n            item\n            lg={4}\n            md={6}\n            xl={3}\n            xs={12}\n          >\n            <LatestProducts />\n          </Grid>\n          <Grid\n            item\n            lg={8}\n            md={12}\n            xl={9}\n            xs={12}\n          >\n            <LatestOrders />\n          </Grid>\n        </Grid>\n          */}\n      </Container>\n    </Page>\n  );\n};\n\nexport default Trendup;\n"]},"metadata":{},"sourceType":"module"}