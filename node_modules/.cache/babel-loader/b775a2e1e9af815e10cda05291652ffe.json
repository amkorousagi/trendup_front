{"ast":null,"code":"var _jsxFileName = \"/home/psc/react-template/react-material-dashboard/src/views/Trendup/keyword/index.js\";\nimport React, { Component } from 'react';\nimport { Sigma, RandomizeNodePositions, RelativeSize } from 'react-sigma';\nimport { Container, Grid, makeStyles, Card, Box } from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport { useParams } from \"react-router-dom\"; //import MAP from './Map'\n//const loadJsonFile = require('load-json-file');\n//const writeJsonFile = require('write-json-file');\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\nexport default class Trendup extends Component {\n  //const classes = useStyles();\n  constructor(props) {\n    super(props);\n    this.state = {\n      myGraph: [{\n        nodes: [],\n        edges: []\n      }]\n    }; //this.state = loadJsonFile('./data.json')\n  } //let myGraph = {nodes:[{id:\"n1\", size:1, label:\"alice\"},{id:\"n2\", size: 1, label:\"rabit\"}, {id:\"n3\", size: 10, label:\"me\"}],\n  // edges:[{id:\"e1\", source:\"n1\", target:\"n2\", size:5}, {id:\"e2\", source:\"n2\", target:\"n3\", size:1}]}\n\n\n  async componentDidMount() {\n    fetch('http://localhost:4000/node').then(response => response.json()).then(data => {\n      this.setState(this.state.myGraph[0][\"nodes\"] = data.data);\n    }).then(data => console.log(data));\n    fetch('http://localhost:4000/edge').then(response => response.json()).then(data => {\n      this.setState(this.state.myGraph[0][\"edges\"] = data[\"data\"]);\n    }).then(data => console.log(this.state[\"myGraph\"])).then(data => this.setState({})).then(data => console.log(\"14\", this.state[\"myGraph\"][0])); //Sigma.refresh()\n\n    console.log(\"dd\", useParams());\n  }\n\n  render() {\n    var gr = this.state.myGraph[0];\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, this.state.myGraph[0].edges.slice(0, 1).map(edges => {\n      return /*#__PURE__*/React.createElement(Sigma, {\n        graph: gr,\n        settings: {\n          drawEdges: true,\n          clone: false,\n          labelThreshold: true\n        },\n        onClickNode: e => window.open(`https://www.youtube.com/channel/${e.data.node[\"id\"]}`, '_blank'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(RelativeSize, {\n        initialSize: 50,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(RandomizeNodePositions, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }));\n    })))\n    /*\n    <div>\n      <ul>\n        \n        {this.state.myGraph[0].nodes.slice(0,1).map(node =>{\n          return (<Sigma\n          graph={gr} settings={{drawEdges: true, clone: false,labelThreshold: true}}\n          onClickNode={e=> window.open( `https://www.youtube.com/channel/${e.data.node[\"id\"]}`, '_blank')}\n        >\n          <RelativeSize initialSize={50}/>\n          <RandomizeNodePositions/>\n        </Sigma>)\n        })}\n      </ul>\n    </div>\n      */\n\n    /*\n    <div>\n      \n        {this.state.myGraph.map(e =>{\n          return  (<Sigma\n          graph={e} settings={{drawEdges: true, clone: false,labelThreshold: true}}\n          onClickNode={e=> window.open( `https://www.youtube.com/channel/${e.data.node[\"id\"]}`, '_blank')}\n        >\n          <RelativeSize initialSize={50}/>\n          <RandomizeNodePositions/>\n        </Sigma>)\n        })}\n      \n    </div>\n    */\n\n    /*\n    <div>\n      <ul>\n        \n        {this.state.myGraph[0].nodes.map(node =>{\n          return <li key={`${node.id}`}>{gr.nodes[0].label}</li>\n        })}\n      </ul>\n    </div>\n        \n       /*\n    <div>\n      <ul>\n        {this.state.myGraph[0].nodes.map(node =>{\n          return <div>{node.label}</div>\n        })}\n      </ul>\n    </div>\n    */\n\n    /*\n      <Container maxWidth={false}>\n        \n        \n        <Box mt={3}>\n          <Results customers={this.state[\"myGraph\"]}/>\n              {console.log(\"13\",this.state[\"myGraph\"])}\n        </Box>\n      </Container>\n      */\n    ;\n  }\n\n}\n;","map":{"version":3,"sources":["/home/psc/react-template/react-material-dashboard/src/views/Trendup/keyword/index.js"],"names":["React","Component","Sigma","RandomizeNodePositions","RelativeSize","Container","Grid","makeStyles","Card","Box","Page","useParams","useStyles","theme","root","backgroundColor","palette","background","dark","minHeight","paddingBottom","spacing","paddingTop","Trendup","constructor","props","state","myGraph","nodes","edges","componentDidMount","fetch","then","response","json","data","setState","console","log","render","gr","slice","map","drawEdges","clone","labelThreshold","e","window","open","node"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport {Sigma, RandomizeNodePositions, RelativeSize} from 'react-sigma';\nimport {\n  Container,\n  Grid,\n  makeStyles,\n  Card,\n  Box\n} from '@material-ui/core';\nimport Page from 'src/components/Page';\nimport {useParams} from \"react-router-dom\";\n//import MAP from './Map'\n//const loadJsonFile = require('load-json-file');\n//const writeJsonFile = require('write-json-file');\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    backgroundColor: theme.palette.background.dark,\n    minHeight: '100%',\n    paddingBottom: theme.spacing(3),\n    paddingTop: theme.spacing(3)\n  }\n}));\n\nexport default class Trendup extends Component {\n  //const classes = useStyles();\n\n  constructor(props){\n    super(props);\n    this.state = {\n      myGraph: [{\n        nodes: [],\n        edges:[]\n      }]\n      \n    }\n    //this.state = loadJsonFile('./data.json')\n  }\n  //let myGraph = {nodes:[{id:\"n1\", size:1, label:\"alice\"},{id:\"n2\", size: 1, label:\"rabit\"}, {id:\"n3\", size: 10, label:\"me\"}],\n  // edges:[{id:\"e1\", source:\"n1\", target:\"n2\", size:5}, {id:\"e2\", source:\"n2\", target:\"n3\", size:1}]}\n\n  async componentDidMount() {\n    \n    fetch('http://localhost:4000/node')\n      .then(response => response.json())\n      .then(data => {this.setState(this.state.myGraph[0][\"nodes\"] = data.data)}\n      )\n      .then(data => console.log(data))\n      \n    fetch('http://localhost:4000/edge')\n      .then(response => response.json())\n      .then(data => {this.setState(this.state.myGraph[0][\"edges\"] = data[\"data\"])}\n      )\n      .then(data => console.log(this.state[\"myGraph\"]))\n      .then(data => this.setState({}))\n      .then(data => console.log(\"14\",this.state[\"myGraph\"][0]))\n      \n      \n      //Sigma.refresh()\n     \n      console.log(\"dd\",useParams())\n  }\n\n  \n  render(){\n    var gr = this.state.myGraph[0]\n    return (\n      <div>\n        <ul>\n          \n          {this.state.myGraph[0].edges.slice(0,1).map(edges =>{\n            return (<Sigma\n            graph={gr} settings={{drawEdges: true, clone: false,labelThreshold: true}}\n            onClickNode={e=> window.open( `https://www.youtube.com/channel/${e.data.node[\"id\"]}`, '_blank')}\n          >\n            <RelativeSize initialSize={50}/>\n            <RandomizeNodePositions/>\n          </Sigma>)\n          })}\n        </ul>\n      </div>\n\n\n      /*\n      <div>\n        <ul>\n          \n          {this.state.myGraph[0].nodes.slice(0,1).map(node =>{\n            return (<Sigma\n            graph={gr} settings={{drawEdges: true, clone: false,labelThreshold: true}}\n            onClickNode={e=> window.open( `https://www.youtube.com/channel/${e.data.node[\"id\"]}`, '_blank')}\n          >\n            <RelativeSize initialSize={50}/>\n            <RandomizeNodePositions/>\n          </Sigma>)\n          })}\n        </ul>\n      </div>\n        */\n      /*\n      <div>\n        \n          {this.state.myGraph.map(e =>{\n            return  (<Sigma\n            graph={e} settings={{drawEdges: true, clone: false,labelThreshold: true}}\n            onClickNode={e=> window.open( `https://www.youtube.com/channel/${e.data.node[\"id\"]}`, '_blank')}\n          >\n            <RelativeSize initialSize={50}/>\n            <RandomizeNodePositions/>\n          </Sigma>)\n          })}\n        \n      </div>\n      */\n      /*\n      <div>\n        <ul>\n          \n          {this.state.myGraph[0].nodes.map(node =>{\n            return <li key={`${node.id}`}>{gr.nodes[0].label}</li>\n          })}\n        </ul>\n      </div>\n          \n         /*\n      <div>\n        <ul>\n          {this.state.myGraph[0].nodes.map(node =>{\n            return <div>{node.label}</div>\n          })}\n        </ul>\n      </div>\n      */\n      \n      /*\n        <Container maxWidth={false}>\n          \n          \n          <Box mt={3}>\n            <Results customers={this.state[\"myGraph\"]}/>\n                {console.log(\"13\",this.state[\"myGraph\"])}\n          </Box>\n        </Container>\n        */\n  \n    );\n  }\n};\n\n\n"]},"metadata":{},"sourceType":"module"}